// Mocks generated by Mockito 5.0.16 from annotations
// in fakeslink/test/app/domain/use_cases/generate_mock_use_cases.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;

import 'package:fakeslink/app/domain/entities/administrative_class_detail.dart'
    as _i12;
import 'package:fakeslink/app/domain/entities/notification.dart' as _i14;
import 'package:fakeslink/app/domain/entities/register.dart' as _i16;
import 'package:fakeslink/app/domain/entities/registerable_class.dart' as _i22;
import 'package:fakeslink/app/domain/entities/schedule.dart' as _i18;
import 'package:fakeslink/app/domain/entities/session.dart' as _i24;
import 'package:fakeslink/app/domain/entities/student.dart' as _i20;
import 'package:fakeslink/app/domain/repositories/authentication_repository.dart'
    as _i6;
import 'package:fakeslink/app/domain/repositories/notification_repository.dart'
    as _i2;
import 'package:fakeslink/app/domain/repositories/schedule_repository.dart'
    as _i4;
import 'package:fakeslink/app/domain/repositories/student_repository.dart'
    as _i5;
import 'package:fakeslink/app/domain/use_cases/create_notification_device_usecase.dart'
    as _i7;
import 'package:fakeslink/app/domain/use_cases/delete_notification_device_usercase.dart'
    as _i9;
import 'package:fakeslink/app/domain/use_cases/get_administrative_class_details.dart'
    as _i10;
import 'package:fakeslink/app/domain/use_cases/get_list_notifications_use_case.dart'
    as _i13;
import 'package:fakeslink/app/domain/use_cases/get_list_register_usecase.dart'
    as _i15;
import 'package:fakeslink/app/domain/use_cases/get_list_schedule_use_case.dart'
    as _i17;
import 'package:fakeslink/app/domain/use_cases/get_profile_usecase.dart'
    as _i19;
import 'package:fakeslink/app/domain/use_cases/get_registerable_class_details_use_case.dart'
    as _i21;
import 'package:fakeslink/app/domain/use_cases/login_usecase.dart' as _i23;
import 'package:fakeslink/app/domain/use_cases/login_with_fingerprint_use_case.dart'
    as _i25;
import 'package:fakeslink/app/domain/use_cases/mark_notification_as_read_use_case.dart'
    as _i26;
import 'package:fakeslink/app/domain/use_cases/set_up_fingerprint_auth_use_case.dart'
    as _i27;
import 'package:fakeslink/core/architecture/failure.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:multiple_result/multiple_result.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeNotificationRepository_0 extends _i1.Fake
    implements _i2.NotificationRepository {}

class _FakeResult_1<E, S> extends _i1.Fake implements _i3.Result<E, S> {}

class _FakeScheduleRepository_2 extends _i1.Fake
    implements _i4.ScheduleRepository {}

class _FakeStudentRepository_3 extends _i1.Fake
    implements _i5.StudentRepository {}

class _FakeAuthenticationRepository_4 extends _i1.Fake
    implements _i6.AuthenticationRepository {}

/// A class which mocks [CreateNotificationDeviceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateNotificationDeviceUseCase extends _i1.Mock
    implements _i7.CreateNotificationDeviceUseCase {
  MockCreateNotificationDeviceUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NotificationRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
              returnValue: _FakeNotificationRepository_0())
          as _i2.NotificationRepository);
  @override
  _i8.Future<void> execute(String? deviceId, String? oneSignalId) =>
      (super.noSuchMethod(Invocation.method(#execute, [deviceId, oneSignalId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [DeleteNotificationDeviceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteNotificationDeviceUseCase extends _i1.Mock
    implements _i9.DeleteNotificationDeviceUseCase {
  MockDeleteNotificationDeviceUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NotificationRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
              returnValue: _FakeNotificationRepository_0())
          as _i2.NotificationRepository);
  @override
  _i8.Future<void> execute(String? deviceId) =>
      (super.noSuchMethod(Invocation.method(#execute, [deviceId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetAdministrativeClassDetailsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAdministrativeClassDetailsUseCase extends _i1.Mock
    implements _i10.GetAdministrativeClassDetailsUseCase {
  MockGetAdministrativeClassDetailsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i3.Result<_i11.Failure, _i12.AdministrativeClassDetails>>
      execute() => (super.noSuchMethod(Invocation.method(#execute, []),
          returnValue:
              Future<_i3.Result<_i11.Failure, _i12.AdministrativeClassDetails>>.value(
                  _FakeResult_1<_i11.Failure,
                      _i12.AdministrativeClassDetails>())) as _i8
          .Future<_i3.Result<_i11.Failure, _i12.AdministrativeClassDetails>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetListNotificationsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetListNotificationsUseCase extends _i1.Mock
    implements _i13.GetListNotificationsUseCase {
  MockGetListNotificationsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NotificationRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
              returnValue: _FakeNotificationRepository_0())
          as _i2.NotificationRepository);
  @override
  _i8.Future<_i3.Result<_i11.Failure, List<_i14.Notification>>> execute(
          int? offset, String? type) =>
      (super.noSuchMethod(Invocation.method(#execute, [offset, type]),
              returnValue: Future<
                      _i3.Result<_i11.Failure, List<_i14.Notification>>>.value(
                  _FakeResult_1<_i11.Failure, List<_i14.Notification>>()))
          as _i8.Future<_i3.Result<_i11.Failure, List<_i14.Notification>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetListRegisterUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetListRegisterUseCase extends _i1.Mock
    implements _i15.GetListRegisterUseCase {
  MockGetListRegisterUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i3.Result<_i11.Failure, List<_i16.Register>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
              returnValue:
                  Future<_i3.Result<_i11.Failure, List<_i16.Register>>>.value(
                      _FakeResult_1<_i11.Failure, List<_i16.Register>>()))
          as _i8.Future<_i3.Result<_i11.Failure, List<_i16.Register>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetListScheduleUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetListScheduleUseCase extends _i1.Mock
    implements _i17.GetListScheduleUseCase {
  MockGetListScheduleUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ScheduleRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeScheduleRepository_2()) as _i4.ScheduleRepository);
  @override
  _i8.Future<_i3.Result<_i11.Failure, List<_i18.Schedule>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
              returnValue:
                  Future<_i3.Result<_i11.Failure, List<_i18.Schedule>>>.value(
                      _FakeResult_1<_i11.Failure, List<_i18.Schedule>>()))
          as _i8.Future<_i3.Result<_i11.Failure, List<_i18.Schedule>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetProfileUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProfileUseCase extends _i1.Mock implements _i19.GetProfileUseCase {
  MockGetProfileUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.StudentRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeStudentRepository_3()) as _i5.StudentRepository);
  @override
  _i8.Future<_i3.Result<_i11.Failure, _i20.Student>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
              returnValue: Future<_i3.Result<_i11.Failure, _i20.Student>>.value(
                  _FakeResult_1<_i11.Failure, _i20.Student>()))
          as _i8.Future<_i3.Result<_i11.Failure, _i20.Student>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetRegisterableClassDetailsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRegisterableClassDetailsUseCase extends _i1.Mock
    implements _i21.GetRegisterableClassDetailsUseCase {
  MockGetRegisterableClassDetailsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i3.Result<_i11.Failure, _i22.RegisterableClass>> execute(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue:
              Future<_i3.Result<_i11.Failure, _i22.RegisterableClass>>.value(
                  _FakeResult_1<_i11.Failure, _i22.RegisterableClass>())) as _i8
          .Future<_i3.Result<_i11.Failure, _i22.RegisterableClass>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LogInUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogInUseCase extends _i1.Mock implements _i23.LogInUseCase {
  MockLogInUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.AuthenticationRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
              returnValue: _FakeAuthenticationRepository_4())
          as _i6.AuthenticationRepository);
  @override
  _i8.Future<_i3.Result<_i11.Failure, _i24.Session>> execute(
          String? username, String? password) =>
      (super.noSuchMethod(Invocation.method(#execute, [username, password]),
              returnValue: Future<_i3.Result<_i11.Failure, _i24.Session>>.value(
                  _FakeResult_1<_i11.Failure, _i24.Session>()))
          as _i8.Future<_i3.Result<_i11.Failure, _i24.Session>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LogInWithFingeprintUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogInWithFingeprintUseCase extends _i1.Mock
    implements _i25.LogInWithFingeprintUseCase {
  MockLogInWithFingeprintUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i3.Result<_i11.Failure, _i24.Session>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
              returnValue: Future<_i3.Result<_i11.Failure, _i24.Session>>.value(
                  _FakeResult_1<_i11.Failure, _i24.Session>()))
          as _i8.Future<_i3.Result<_i11.Failure, _i24.Session>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MarkNotificationAsReadUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockMarkNotificationAsReadUseCase extends _i1.Mock
    implements _i26.MarkNotificationAsReadUseCase {
  MockMarkNotificationAsReadUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> execute(_i14.NotificationDetails? details) =>
      (super.noSuchMethod(Invocation.method(#execute, [details]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SetUpFingerPrintAuthUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSetUpFingerPrintAuthUseCase extends _i1.Mock
    implements _i27.SetUpFingerPrintAuthUseCase {
  MockSetUpFingerPrintAuthUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i3.Result<_i11.Failure, void>> execute(String? password) =>
      (super.noSuchMethod(Invocation.method(#execute, [password]),
              returnValue: Future<_i3.Result<_i11.Failure, void>>.value(
                  _FakeResult_1<_i11.Failure, void>()))
          as _i8.Future<_i3.Result<_i11.Failure, void>>);
  @override
  String toString() => super.toString();
}
